"""
Django settings for OpenSell project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
from pathlib import Path
from django.contrib.messages import constants as messages
import os
import boto3
from django.core.exceptions import ImproperlyConfigured
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False') == 'True'

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '').split(',')

if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    
SESSION_COOKIE_AGE = 1209600  
SESSION_COOKIE_SECURE = True  
SESSION_COOKIE_HTTPONLY = True 
SESSION_COOKIE_SAMESITE = 'Lax'
    
CSRF_COOKIE_SECURE = True 
CSRF_COOKIE_HTTPONLY = False  
CSRF_COOKIE_SAMESITE = 'Lax'  
    
# Message encryption settings
MESSAGE_ENCRYPTION_KEY = os.environ.get('MESSAGE_ENCRYPTION_KEY', None)

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.sites',
    'django.contrib.sitemaps',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'User.apps.UserConfig',
    'Home.apps.HomeConfig',
    'Messages',
    'Notifications',
    'Dashboard',
    'Pages',


    # Third Party Apps
    'storages',
    'imagekit',
    'django_countries',
    'widget_tweaks',
    'crispy_forms',
    'compressor',
    'django_q',

    # All Auths
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',

]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

SITE_ID = 1

if DEBUG:
    # Development configuration
    SITE_NAME = 'OpenSell Marketplace'
    SITE_DOMAIN = os.environ.get('SITE_DOMAIN', '127.0.0.1:8000')
    SITE_URL = os.environ.get('SITE_URL', 'http://127.0.0.1:8000')
else:
    # Production configuration
    SITE_NAME = 'OpenSell'
    SITE_DOMAIN = os.environ.get('SITE_DOMAIN')
    SITE_URL = os.environ.get('SITE_URL')

ROOT_URLCONF = 'OpenSell.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.static',
                'Home.context_processors.categories_with_counts',
                'Messages.views.get_unread_count',
                'Notifications.views.notification_counts'
            ],
        },
    },
]



WSGI_APPLICATION = 'OpenSell.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

if DEBUG:
    # Use SQLite for development
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    # Use production database settings
    DATABASES = {
        'default': {
            'ENGINE': os.environ.get('DB_ENGINE'),
            'NAME': os.environ.get('DB_NAME'),
            'USER': os.environ.get('DB_USER'),
            'PASSWORD': os.environ.get('DB_PASSWORD'),
            'HOST': os.environ.get('DB_HOST'),
            'PORT': os.environ.get('DB_PORT'),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = []


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True



# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]


# Authentication settings

# Redirect URLs
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = '/'
ACCOUNT_SIGNUP_REDIRECT_URL = '/profile/update/'

# Account settings
ACCOUNT_LOGIN_METHODS = {'username','email'}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'username*', 'password1*', 'password2*']
ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_CONFIRMATION_HMAC = True

SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Social Account settings
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'
SOCIALACCOUNT_EMAIL_REQUIRED = True
SOCIALACCOUNT_QUERY_EMAIL = True
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_USERNAME_REQUIRED = True
SOCIALACCOUNT_STORE_TOKENS = True
SOCIALACCOUNT_LOGIN_ON_GET = True
SOCIALACCOUNT_AUTO_SIGNUP = True

# Google-specific settings

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': os.environ.get('GOOGLE_CLIENT_ID'),
            'secret': os.environ.get('GOOGLE_CLIENT_SECRET'),
            'key': ''
        },
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
            'prompt': 'select_account consent',
        }
    }
}

# Security settings
ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'https' if not DEBUG else 'http'
ACCOUNT_SESSION_REMEMBER = None


# Performance and UX improvements
ACCOUNT_EMAIL_SUBJECT_PREFIX = ''
ACCOUNT_LOGIN_ON_PASSWORD_RESET = True


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': '/home/ubuntu/OpenSellRepo/logs/django-oauth-debug.log',
            'maxBytes': 1024*1024*5,  # 5 MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
        'mail_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': '/home/ubuntu/OpenSellRepo/logs/django-mail-debug.log',
            'maxBytes': 1024*1024*5,  # 5 MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'allauth': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        # Add these new loggers
        'django.core.mail': {
            'handlers': ['mail_file', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django.utils.log': {
            'handlers': ['mail_file', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django.core.mail.backends': {
            'handlers': ['mail_file', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'smtplib': {  # This will capture low-level SMTP operations
            'handlers': ['mail_file', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        # Add a catch-all logger for your application
        '': {  # Root logger
            'handlers': ['file', 'console'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
}
if DEBUG:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
            },
        },
        'loggers': {
            'Home.views': {
                'handlers': ['console'],
                'level': 'DEBUG',
                'propagate': True,
            },
            'django.request': {
                'handlers': ['console'],
                'level': 'DEBUG',
                'propagate': True,
            },
        },
    }

# Email settings
if not DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = os.environ.get('EMAIL_HOST')
    EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))
    EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
    
    EMAIL_USE_TLS = True
    EMAIL_USE_SSL = False
    
    SERVER_EMAIL = 'no-reply@opensell.online'
    DEFAULT_FROM_EMAIL = 'OpenSell <no-reply@opensell.online>'
    SUPPORT_EMAIL = 'OpenSell Support <support@opensell.online>'
    NO_REPLY_EMAIL = 'OpenSell <no-reply@opensell.online>'
else:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'



# Static files (CSS, JavaScript, Images)
# Base directories
BASE_DIR = Path(__file__).resolve().parent.parent

# Development Settings (When DEBUG = True)
if DEBUG:
    STATIC_URL = '/static/'
    STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
    
    STORAGES = {
        "staticfiles": {
            "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
        },
        "default": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
            "location": MEDIA_ROOT,
        },
    }

# Production Settings (When DEBUG = False)
else:
    # AWS S3 Configuration for media files only
    AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_REGION_NAME = os.environ.get('AWS_S3_REGION_NAME')
    AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
    AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"
    AWS_DEFAULT_ACL = None
    AWS_S3_FILE_OVERWRITE = False
    AWS_S3_VERIFY = True
    AWS_QUERYSTRING_AUTH = False

    # Production: Local static files + S3 media files
    STATIC_URL = '/static/'
    STATIC_ROOT = '/home/ubuntu/OpenSellRepo/staticfiles/'
    MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/media/"

    STORAGES = {
        "staticfiles": {
            "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
        },
        "default": {
            "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
            "AWS_LOCATION": "media",
            "AWS_S3_OBJECT_PARAMETERS": {
                "CacheControl": "public, max-age=86400",
            },
        },
    }

# PWA specific MIME types
import mimetypes
mimetypes.add_type("application/manifest+json", ".webmanifest", True)
mimetypes.add_type("application/manifest+json", ".json", True)


# Increase Django's file upload limits
DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10MB 


# Free API Keys (get from respective platforms)
HUGGINGFACE_API_TOKEN = os.environ.get('HUGGINGFACE_API_TOKEN')

if DEBUG:
    # Development configuration - using SQLite
    Q_CLUSTER = {
        'name': 'opensell-dev',
        'workers': 2,
        'recycle': 500,
        'timeout': 90,
        'compress': True,
        'save_limit': 250,
        'queue_limit': 500,
        'cpu_affinity': 1,
        'label': 'OpenSell Dev',
        'sync': True,
        'orm': 'default',  # Uses SQLite in development
        'catch_up': True,  # Process old tasks on startup
        'max_attempts': 3,
        'retry': 120,
    }
else:
    # Production configuration
    # Option 1: Using your PostgreSQL database (simplest)
    Q_CLUSTER = {
        'name': 'opensell-prod',
        'workers': 4,
        'recycle': 500,
        'timeout': 120,
        'compress': True,
        'save_limit': 250,
        'queue_limit': 500,
        'cpu_affinity': 1,
        'label': 'OpenSell Prod',
        'orm': 'default',  
        'catch_up': False,
        'max_attempts': 3,
        'retry': 180,
        'ack_failures': True,
        'bulk': 10,
    }
    
# Django Compressor Settings
COMPRESS_ENABLED = not DEBUG  # Enable compression in production only
COMPRESS_CSS_FILTERS = [
    'compressor.filters.css_default.CssAbsoluteFilter',
    'compressor.filters.cssmin.rCSSMinFilter', 
]
COMPRESS_JS_FILTERS = [
    'compressor.filters.jsmin.rJSMinFilter', 
]

# Cache compressed files
COMPRESS_CACHE_BACKEND = 'default'
COMPRESS_REBUILD_TIMEOUT = 3600

# Storage for compressed files
if DEBUG:
    COMPRESS_STORAGE = 'compressor.storage.CompressorFileStorage'
    COMPRESS_URL = STATIC_URL
    COMPRESS_ROOT = STATIC_ROOT
else:
    # For production, use the same storage as static files
    COMPRESS_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
    COMPRESS_URL = STATIC_URL
    COMPRESS_ROOT = STATIC_ROOT

# Offline compression for production
COMPRESS_OFFLINE = not DEBUG
COMPRESS_OFFLINE_CONTEXT = {
    'STATIC_URL': STATIC_URL,
}

# Add staticfiles finder for compressor
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
]