# Generated by Django 5.0.1 on 2025-03-21 10:29

import Home.utils
import django.core.validators
import django.db.models.deletion
import imagekit.models.fields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('User', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to=Home.utils.category_image_path)),
                ('slug', models.SlugField(max_length=100, null=True, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='Banner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='Advertisement Banner', max_length=100)),
                ('subtitle', models.CharField(blank=True, max_length=200, null=True)),
                ('image', models.ImageField(upload_to='banners/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'webp'])])),
                ('mobile_image', models.ImageField(blank=True, help_text='Optimized image for mobile devices', null=True, upload_to='banners/mobile/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'webp'])])),
                ('url', models.URLField()),
                ('banner_type', models.CharField(choices=[('hero', 'Hero Banner'), ('promotional', 'Promotional Banner'), ('announcement', 'Announcement Banner')], default='promotional', max_length=20)),
                ('display_location', models.CharField(choices=[('home_top', 'Home Page Top'), ('home_middle', 'Home Page Middle'), ('category', 'Category Pages'), ('global', 'Global')], default='home_top', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('priority', models.IntegerField(default=0, help_text='Higher number means higher priority')),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-priority', '-updated_at'],
                'indexes': [models.Index(fields=['is_active', 'display_location'], name='Home_banner_is_acti_408e00_idx')],
            },
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', models.SlugField(max_length=100, null=True, unique=True)),
                ('categories', models.ManyToManyField(related_name='brands', to='Home.category')),
            ],
        ),
        migrations.CreateModel(
            name='Product_Listing',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used')], default='new', max_length=4)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('listing_type', models.CharField(choices=[('standard', 'Standard Listing (7 days)'), ('premium', 'Premium Listing (30 days)'), ('emergency', 'Emergency Sale (3 days)'), ('permanent', 'Permanent Retail Listing')], default='standard', max_length=10)),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('sold_quantity', models.PositiveIntegerField(default=0)),
                ('is_always_available', models.BooleanField(default=False)),
                ('expiration_date', models.DateTimeField(blank=True, null=True)),
                ('last_stock_notification', models.DateTimeField(blank=True, null=True)),
                ('deletion_warning_sent', models.BooleanField(default=False)),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='Home.brand')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Home.category')),
                ('location', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='User.location')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='User.profile')),
            ],
        ),
        migrations.CreateModel(
            name='Product_Image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', imagekit.models.fields.ProcessedImageField(upload_to=Home.utils.user_listing_path)),
                ('is_primary', models.BooleanField(default=False)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='Home.product_listing')),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('review_type', models.CharField(choices=[('product', 'Product Review'), ('seller', 'Seller Review')], max_length=10)),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='Home.product_listing')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews_given', to=settings.AUTH_USER_MODEL)),
                ('seller', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='seller_reviews', to='User.profile')),
            ],
        ),
        migrations.CreateModel(
            name='ReviewReply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='Home.review')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_replies_given', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Review replies',
            },
        ),
        migrations.CreateModel(
            name='SavedProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('saved_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saved_by', to='Home.product_listing')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saved_products', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-saved_at'],
            },
        ),
        migrations.CreateModel(
            name='Subcategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(max_length=100, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='Home.category')),
            ],
            options={
                'verbose_name_plural': 'Subcategories',
            },
        ),
        migrations.AddField(
            model_name='product_listing',
            name='subcategory',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='Home.subcategory'),
        ),
        migrations.AddField(
            model_name='brand',
            name='subcategories',
            field=models.ManyToManyField(related_name='brands', to='Home.subcategory'),
        ),
        migrations.AddConstraint(
            model_name='review',
            constraint=models.UniqueConstraint(fields=('reviewer', 'product'), name='unique_product_review'),
        ),
        migrations.AddConstraint(
            model_name='review',
            constraint=models.UniqueConstraint(fields=('reviewer', 'seller'), name='unique_seller_review'),
        ),
        migrations.AlterUniqueTogether(
            name='savedproduct',
            unique_together={('user', 'product')},
        ),
        migrations.AlterUniqueTogether(
            name='subcategory',
            unique_together={('category', 'name')},
        ),
    ]
